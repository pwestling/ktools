
#!/bin/bash

set -eou pipefail

SECRET=$1
NAMESPACE=""
NAMESPACE_FLAG=""
IFS='/' read -ra PARTS <<< "$SECRET"
if [[ ${#PARTS[@]} == "2" ]]; then
  NAMESPACE="${PARTS[0]}"
  NAMESPACE_FLAG="-n $NAMESPACE"
  SECRET=${PARTS[1]}
fi

echo "Determined namespace to be $NAMESPACE"
echo "Determined secret to be $SECRET"

shift
COMMAND="${@}"
SECRETDIR=$SECRET"_secret"

function finish {
  rm cmds.txt || true
  rm -rf $SECRETDIR 
}

trap finish EXIT ERR                                                                                     

echo "Creating secret dir at $SECRETDIR"
mkdir -p $SECRETDIR
echo "SECRETDIR=$SECRETDIR" > cmds.txt
echo "Downloading secrets..."
kubectl get secret $SECRET $NAMESPACE_FLAG -o json | jq  -r '.data | to_entries[] | "echo \"Unpacking \(.key)...\" && echo \(.value) | base64 --decode > $SECRETDIR/\(.key)"' >> cmds.txt || \
  (echo "Creating new secret..." && touch cmds.txt)
echo "Unpacking secrets..."
env bash cmds.txt
cd $SECRETDIR
EDITOR=${EDITOR:-vim}

checksum(){
  find . -type f -exec md5sum {} \; | sort -k 2 | md5sum | cut -d" " -f1
}
checksum > /tmp/secret_$SECRET.chk || echo "1" > /tmp/secret_$SECRET.chk
eval $COMMAND
if [[ $(checksum) != $(cat /tmp/secret_$SECRET.chk) ]]; then
  CREATECMD="kubectl create secret generic $SECRET $NAMESPACE_FLAG"
  for filename in *; do
    CREATECMD="$CREATECMD --from-file=$filename "
  done
  CREATECMD="$CREATECMD --dry-run -o yaml"
  echo "Uploading changes..."
  # The commented out line works with 'https://github.com/mikefarah/yq'
  # Ideally this would detect whether 'yq' or 'python-yq' was installed and handle both or enforce one
  # $CREATECMD | yq w - metadata.namespace $NAMESPACE | kubectl apply -f -
  $CREATECMD | yq --yaml-output ".metadata.namespace |= \"$NAMESPACE\"" | kubectl apply -f -
else
  echo "No changes detected"
fi
cd ..
rm -rf $SECRETDIR
echo "Done"
